#!/usr/bin/python3.3
import threading, telebot, schedule, time
import os, sys
from telebot import types
from telegram.constants import ParseMode
import for_json

bot = telebot.TeleBot("API_TOKEN")
admin_id = 'ADMIN_ID'

start_txt = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∫–∏–¥–∞—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω—É–∂–Ω–æ–π –ø–∞—Ä–æ–π —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞/—Ñ–∞–º–∏–ª–∏–µ–π –ø—Ä–µ–ø–æ–¥–∞\
\n\nCreated by: @Kr0sH\_512'

@bot.message_handler(commands=['update'])
def update_schedules(message):
    if (str(message.from_user.id) != admin_id):
        bot.send_message(message.from_user.id, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', parse_mode='Markdown')
    else:
        for_json.create_schedule_tasks()

    
@bot.message_handler(commands=['restart'])
def restart_bot(message):
    if (str(message.from_user.id) != admin_id):
        bot.send_message(message.from_user.id, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', parse_mode='Markdown')
    else:
        bot.send_message(admin_id, 'üõë bye', parse_mode=ParseMode.HTML)
        os.execv(sys.executable, ['python'] + sys.argv)
        
@bot.message_handler(commands=['json'])
def send_json(message):
    if (str(message.from_user.id) != admin_id):
        bot.send_message(message.from_user.id, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', parse_mode='Markdown')
    else:
        with open(for_json.path, 'rb') as json_file: 
            bot.send_document(admin_id, json_file)
        with open(for_json.path_schedule, 'rb') as json_file: 
            bot.send_document(admin_id, json_file)
        

@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.type == "supergroup":
        print(message.text)
        print(message.chat.id)
        print(message.text.split(' '))
        if len(message.text.split(' ')) != 2:
            bot.send_message(message.chat.id, start_txt, parse_mode='Markdown')
            bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É. –ß—Ç–æ–±—ã –æ–Ω –ø—Ä–∏—Å—ã–ª–∞–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç, \
            –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ, —É–∫–∞–∑–∞–≤ –≤–º–µ—Å—Ç–µ —Å /start@vmk_schedule_bot –Ω–æ–º–µ—Ä\_—Å–≤–æ–µ–π\_–≥—Ä—É–ø–ø—ã.\
                \n–ü—Ä–∏–º–µ—Ä:\n/start@vmk_schedule_bot 102', parse_mode='Markdown')
        else:
            temp = message.text.split(' ')[1]
            if temp.isdigit():
                infos = [
                    message.chat.id, 
                    message.chat.title, 
                    '', 
                    message.from_user.username,
                    temp
                ]
                if for_json.check_group_in_json(temp):
                    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {} –≥—Ä—É–ø–ø—ã'.format(temp), parse_mode='Markdown')
                else:
                    bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \
                        \n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –ø–∏–Ω–∞–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É: @Kr0sH\_512', parse_mode='Markdown')
                    send_message(admin_id, 'üõë –í –≥—Ä—É–ø–ø–µ {} –±—ã–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ {} –≥—Ä—É–ø–ø—É.\
                        \nid: {}'.format(message.chat.title, temp, message.chat.id))
                    temp = 'other'
                for_json.save_user(infos)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\
                    \n–ü—Ä–∏–º–µ—Ä:\n/start@vmk_schedule_bot 102', parse_mode='Markdown')

        return
    bot.send_message(message.chat.id, start_txt, parse_mode='Markdown')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="102", callback_data="102"))
    markup.add(types.InlineKeyboardButton(text="103", callback_data="103"))
    markup.add(types.InlineKeyboardButton(text="105", callback_data="105"))
    markup.add(types.InlineKeyboardButton(text="–ú–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ", callback_data="other"))
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    infos = [
            call.from_user.id, 
            call.from_user.first_name, 
            call.from_user.last_name, 
            call.from_user.username,
            call.data
        ]
    for_json.save_user(infos)
    if call.data == 'other':
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, 
                              text='–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /request \
                                  –∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å\
                                  \n–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã, —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 
                              parse_mode='Markdown')
    else:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, 
                              text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!', 
                              parse_mode='Markdown')
        
        

@bot.message_handler(commands=['help', 'faq'])
def help(message):
    help_msg = '–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\
            \n/start - –∏—Å–ø–æ–ª—å–∑—É–π, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\
            \n/info - –∏—Å–ø–æ–ª—å–∑—É–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\
            \n/pause - –∏—Å–ø–æ–ª—å–∑—É–π, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞\
            \n/timeout - –Ω–∞—Å—Ç—Ä–æ–π –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\
            \n/request - –∏—Å–ø–æ–ª—å–∑—É–π, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å\
            \n\n–ò–ª–∏ –∂–µ –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é: @Kr0sH\_512'
    bot.send_message(message.chat.id, help_msg, parse_mode='Markdown')
    if str(message.from_user.id) == admin_id and message.from_user.id == message.chat.id:
        help_msg = 'üõë –ò –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞:\
            \n/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.\
            \n/update - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ schedule –∑–∞–¥–∞—á\
            \n/json - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\
            \n/info id\_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        bot.send_message(message.from_user.id, help_msg, parse_mode='Markdown')
    
@bot.message_handler(commands=['request'])
def request(message):
    bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\
        \n(–∏–ª–∏ –Ω–∞–ø–∏—à–∏ stop, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)', parse_mode='Markdown')
    bot.register_next_step_handler(message, send_request)
    
def send_request(message):
    if message.text == "stop" or message.text == "—Å—Ç–æ–ø" or message.text[0] == '/':
        bot.send_message(message.from_user.id, '–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–∫–∏', parse_mode='Markdown')
        return
    infos = [
        message.from_user.id, 
        message.from_user.first_name, 
        message.from_user.last_name, 
        message.from_user.username,
        message.text
    ]
    
    for i in range(len(infos)):
        if type(infos[i]) == type(None):
            infos[i] = ''
        if '_' in str(infos[i]):
            infos[i] = str(infos[i]).replace('_', '\_')
    
    text = 'üõë –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {} {} (@{}):\n\n{}\nid: {}'.format(infos[1], infos[2], infos[3], infos[4], infos[0])
    bot.send_message(admin_id, text, parse_mode='Markdown')
    bot.send_message(message.from_user.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!', parse_mode='Markdown')


    
@bot.message_handler(commands=['schedule']) ### –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
def send_schedule(message):
    # –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ç–≤–æ—Ä–∏—Å—å, —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏–ª —Å–µ–π—á–∞—Å —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\
        \n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', parse_mode='Markdown')
    
@bot.message_handler(commands=['timeout'])
def set_timeout(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60. \
        \n–≠—Ç–æ –±—É–¥–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —É—Ä–æ–∫–µ (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)', parse_mode='Markdown')
    bot.register_next_step_handler(message, save_timeout)

def save_timeout(message):
    if message.text[0] == '/':
        return
    if str(message.text).isdigit() and int(message.text) <= 60 and int(message.text) >= 1:
        for_json.change_user_param(str(message.chat.id), 'timeout', str(message.text))
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ {} –º–∏–Ω—É—Ç –¥–æ —É—Ä–æ–∫–∞'.format(str(message.text)), parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60. \n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10', parse_mode='Markdown')
        bot.register_next_step_handler(message, save_timeout)
    
@bot.message_handler(commands=['info'])
def send_info(message):
    if len(message.text.split(' ')) == 2 and str(message.from_user.id) == admin_id:
        bot.send_message(message.chat.id, 'üõë –û–∫–µ–π, –¥–µ—Ä–∂–∏', parse_mode='Markdown')
        text = for_json.return_infos(message.text.split(' ')[1])
        bot.send_message(message.chat.id, text, parse_mode=ParseMode.HTML)
        return
    bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –≤–æ—Ç —Ç–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', parse_mode='Markdown')
    text = for_json.return_infos(str(message.chat.id))
    bot.send_message(message.chat.id, text, parse_mode=ParseMode.HTML)
    
@bot.message_handler(commands=['pause'])
def pause_schedule(message):
    for_json.change_user_param(str(message.chat.id), 'allow_message', 'no')
    bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ—Ä–∞—â–µ–Ω–∞. \
        \n–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π\n/start', parse_mode='Markdown')
    
@bot.message_handler(content_types=['text'])
def text_message(message):
    if message.chat.type == "supergroup":
        return
    bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â—ë –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\
    \n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help.', parse_mode='Markdown')

def send_message(id, text):
    bot.send_message(id, text, parse_mode=ParseMode.HTML)

if __name__ == '__main__':
    for_json.create_schedule_tasks()
    send_message(admin_id, 'üõë —è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è!')
    print("-------------------------")
    
    threading.Thread(target=bot.infinity_polling, name='bot_infinity_polling', daemon=True).start()

    while True:
        schedule.run_pending()
        time.sleep(5)
